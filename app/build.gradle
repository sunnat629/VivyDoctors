apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"

apply from: rootProject.file("versions.gradle")

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId "dev.sunnat629.vivydoctors"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }
}

androidExtensions {
    experimental = true
}

kapt {
    correctErrorTypes = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"

    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.core:core-ktx:${versions.ktx}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"

    // material design
    implementation "com.google.android.material:material:${versions.material}"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"

    // navigation
    implementation "androidx.navigation:navigation-ui:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-fragment:${versions.navigation}"
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"

    //Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"

    //Paging
    implementation "android.arch.paging:runtime:${versions.paging}"

    // Dagger 2
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    // Retrofit adapter for coroutines
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:${versions.retrofit2Coroutines}"

    //okhttp
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp3}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    // logger
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // unit testing
    testImplementation "junit:junit:${versions.junit}"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.nhaarmanMockito}"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.nhaarmanMockito}"

    // espresso ui-integration testing
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test.ext:junit:${versions.testExtJunit}"
    androidTestImplementation "androidx.test:core:${versions.androidTestRules}"
    androidTestImplementation "androidx.test:runner:${versions.androidTestRules}"
    androidTestImplementation "androidx.test:rules:${versions.androidTestRules}"

    // memory leak check
    // debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
}
